/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HTTPproxy_TYPES_H
#define HTTPproxy_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace proxyspace {

class response;

typedef struct _response__isset {
  _response__isset() : document(false), response_code(false) {}
  bool document :1;
  bool response_code :1;
} _response__isset;

class response {
 public:

  static const char* ascii_fingerprint; // = "EEBC915CE44901401D881E6091423036";
  static const uint8_t binary_fingerprint[16]; // = {0xEE,0xBC,0x91,0x5C,0xE4,0x49,0x01,0x40,0x1D,0x88,0x1E,0x60,0x91,0x42,0x30,0x36};

  response(const response&);
  response& operator=(const response&);
  response() : document(), response_code(0) {
  }

  virtual ~response() throw();
  std::string document;
  int32_t response_code;

  _response__isset __isset;

  void __set_document(const std::string& val);

  void __set_response_code(const int32_t val);

  bool operator == (const response & rhs) const
  {
    if (!(document == rhs.document))
      return false;
    if (!(response_code == rhs.response_code))
      return false;
    return true;
  }
  bool operator != (const response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const response & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const response& obj);
};

void swap(response &a, response &b);

} // namespace

#endif
