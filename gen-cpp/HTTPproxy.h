/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef HTTPproxy_H
#define HTTPproxy_H

#include <thrift/TDispatchProcessor.h>
#include "HTTPproxy_types.h"

namespace proxyspace {

class HTTPproxyIf {
 public:
  virtual ~HTTPproxyIf() {}
  virtual void request(response& _return, const std::string& url) = 0;
  virtual void shutdown() = 0;
};

class HTTPproxyIfFactory {
 public:
  typedef HTTPproxyIf Handler;

  virtual ~HTTPproxyIfFactory() {}

  virtual HTTPproxyIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(HTTPproxyIf* /* handler */) = 0;
};

class HTTPproxyIfSingletonFactory : virtual public HTTPproxyIfFactory {
 public:
  HTTPproxyIfSingletonFactory(const boost::shared_ptr<HTTPproxyIf>& iface) : iface_(iface) {}
  virtual ~HTTPproxyIfSingletonFactory() {}

  virtual HTTPproxyIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(HTTPproxyIf* /* handler */) {}

 protected:
  boost::shared_ptr<HTTPproxyIf> iface_;
};

class HTTPproxyNull : virtual public HTTPproxyIf {
 public:
  virtual ~HTTPproxyNull() {}
  void request(response& /* _return */, const std::string& /* url */) {
    return;
  }
  void shutdown() {
    return;
  }
};

typedef struct _HTTPproxy_request_args__isset {
  _HTTPproxy_request_args__isset() : url(false) {}
  bool url :1;
} _HTTPproxy_request_args__isset;

class HTTPproxy_request_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  HTTPproxy_request_args(const HTTPproxy_request_args&);
  HTTPproxy_request_args& operator=(const HTTPproxy_request_args&);
  HTTPproxy_request_args() : url() {
  }

  virtual ~HTTPproxy_request_args() throw();
  std::string url;

  _HTTPproxy_request_args__isset __isset;

  void __set_url(const std::string& val);

  bool operator == (const HTTPproxy_request_args & rhs) const
  {
    if (!(url == rhs.url))
      return false;
    return true;
  }
  bool operator != (const HTTPproxy_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HTTPproxy_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HTTPproxy_request_args& obj);
};


class HTTPproxy_request_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~HTTPproxy_request_pargs() throw();
  const std::string* url;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HTTPproxy_request_pargs& obj);
};

typedef struct _HTTPproxy_request_result__isset {
  _HTTPproxy_request_result__isset() : success(false) {}
  bool success :1;
} _HTTPproxy_request_result__isset;

class HTTPproxy_request_result {
 public:

  static const char* ascii_fingerprint; // = "A7EBA1EF34886CA23D8B187ED3C45C57";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xEB,0xA1,0xEF,0x34,0x88,0x6C,0xA2,0x3D,0x8B,0x18,0x7E,0xD3,0xC4,0x5C,0x57};

  HTTPproxy_request_result(const HTTPproxy_request_result&);
  HTTPproxy_request_result& operator=(const HTTPproxy_request_result&);
  HTTPproxy_request_result() {
  }

  virtual ~HTTPproxy_request_result() throw();
  response success;

  _HTTPproxy_request_result__isset __isset;

  void __set_success(const response& val);

  bool operator == (const HTTPproxy_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HTTPproxy_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HTTPproxy_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HTTPproxy_request_result& obj);
};

typedef struct _HTTPproxy_request_presult__isset {
  _HTTPproxy_request_presult__isset() : success(false) {}
  bool success :1;
} _HTTPproxy_request_presult__isset;

class HTTPproxy_request_presult {
 public:

  static const char* ascii_fingerprint; // = "A7EBA1EF34886CA23D8B187ED3C45C57";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0xEB,0xA1,0xEF,0x34,0x88,0x6C,0xA2,0x3D,0x8B,0x18,0x7E,0xD3,0xC4,0x5C,0x57};


  virtual ~HTTPproxy_request_presult() throw();
  response* success;

  _HTTPproxy_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const HTTPproxy_request_presult& obj);
};


class HTTPproxy_shutdown_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  HTTPproxy_shutdown_args(const HTTPproxy_shutdown_args&);
  HTTPproxy_shutdown_args& operator=(const HTTPproxy_shutdown_args&);
  HTTPproxy_shutdown_args() {
  }

  virtual ~HTTPproxy_shutdown_args() throw();

  bool operator == (const HTTPproxy_shutdown_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const HTTPproxy_shutdown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HTTPproxy_shutdown_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HTTPproxy_shutdown_args& obj);
};


class HTTPproxy_shutdown_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~HTTPproxy_shutdown_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const HTTPproxy_shutdown_pargs& obj);
};

class HTTPproxyClient : virtual public HTTPproxyIf {
 public:
  HTTPproxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  HTTPproxyClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request(response& _return, const std::string& url);
  void send_request(const std::string& url);
  void recv_request(response& _return);
  void shutdown();
  void send_shutdown();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class HTTPproxyProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<HTTPproxyIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (HTTPproxyProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdown(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  HTTPproxyProcessor(boost::shared_ptr<HTTPproxyIf> iface) :
    iface_(iface) {
    processMap_["request"] = &HTTPproxyProcessor::process_request;
    processMap_["shutdown"] = &HTTPproxyProcessor::process_shutdown;
  }

  virtual ~HTTPproxyProcessor() {}
};

class HTTPproxyProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  HTTPproxyProcessorFactory(const ::boost::shared_ptr< HTTPproxyIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< HTTPproxyIfFactory > handlerFactory_;
};

class HTTPproxyMultiface : virtual public HTTPproxyIf {
 public:
  HTTPproxyMultiface(std::vector<boost::shared_ptr<HTTPproxyIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HTTPproxyMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HTTPproxyIf> > ifaces_;
  HTTPproxyMultiface() {}
  void add(boost::shared_ptr<HTTPproxyIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void request(response& _return, const std::string& url) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request(_return, url);
    }
    ifaces_[i]->request(_return, url);
    return;
  }

  void shutdown() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdown();
    }
    ifaces_[i]->shutdown();
  }

};

} // namespace

#endif
