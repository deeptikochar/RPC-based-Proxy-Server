// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "HTTPproxy.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <iostream>

#include "../curl_fetch.h"
#include "../random_cache.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::proxyspace;

random_cache cache();


class HTTPproxyHandler : virtual public HTTPproxyIf {
 public:
  HTTPproxyHandler() {
    std::cout<<"Server is up and running...\n";
  }

  void request(response& _return, const std::string& url) {
    /*
    Error codes :
    0 - Cache miss. Curl could not fetch document
    1 - Cache hit !
    2 - Cache miss. Cache updated with document.
    3 - Cache miss. Curl fetch successful but document cannot fit in cache. 
    */
    _return.response_code = 0;
    std::string cache_entry;
    if(cache.cache_fetch(url, cache_entry))
    {
        _return.response_code = 1;
        _return.document = cache_entry;
    }
    else
    {
      std::cout<<"Just before fetch_url\n";
        if(fetch_url(url, cache_entry))
        {
          std::cout<<"In fetch_url\n";
          _return.response_code = 0;
          _return.document = "";
        }
        else
        {
          std::cout<<"Before cache_insert\n";
           if(cache.cache_insert(url, cache_entry))
          {
            std::cout<<"After cache_insert\n";
            _return.response_code = 2;
            _return.document = cache_entry;        }
          else
          {
            std::cout<<"Can't insert in cache\n";
            _return.response_code = 3;
            _return.document = cache_entry;
          }
        }
    }

    std::cout<<"Requested URL is : "<<url<<"\n";
  }

  void shutdown() {
    // Your implementation goes here
    printf("Shutting down...\n");
    exit(0);
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<HTTPproxyHandler> handler(new HTTPproxyHandler());
  shared_ptr<TProcessor> processor(new HTTPproxyProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

